**********
INCOMPLETE
**********

Map

The Map class is the mother and container of all objects.

To load (assuming atl is the name of the source folder):
Map = require 'atl.Map'

========================================================================
PROPERTIES
========================================================================
	.width      = The width of the map in tile units.
	.height     = The height of the map in tile units.
	.tilewidth  = The width of a tile cell. The tiles themselves may not
	              be the same size.
	.tileheight = The height of a tile cell. The tiles themselves may not
	              be the same size.
	.orientation= The map orientation (orthogonal/isometric/staggered)
	.ox         = The parallax origin x offset.
	.oy         = The parallax origin y offset.
	.layers     = The table containing the layers indexed by their names.
	.layerOrder = The table containing the layers indexed by their draw
	              order.
	.tilesets   = The table containing the tilesets indexed by their names.
	.tiles      = The table containing the tiles indexed by their gid.
	.properties = The map properties where .properties[name]= value .            

========================================================================
FUNCTIONS
========================================================================
Map(width,height,tilewidth,tileheight[,args])
Map:new(width,height,tilewidth,tileheight[,args])

	Creates a new Map object. Only call this from the Map class.

	*********
	Arguments
	*********
	
	tilewidth (number): 
		The width of a tile cell.
	
	tileheight (number):
		The height of a tile cell.
		
	width (number):
		The map width in tile units.
	
	height (number):
		The map height in tile units.
		
	args (table):
		A table for optional arguments. The arguments [default] are:
		
		orientation= ["orthogonal"] 
		ox         = [0] 
		oy         = [0] 
		layers     = [{}] 
		layerOrder = [{}] 
		tilesets   = [{}] 
		tiles      = [{}] 
		properties = [{}] 
		
	#######
	Returns
	#######
	
	map (Map)
		A new Map object
------------------------------------------------------------------------	
:setDrawRange(x,y,x2,y2)

	Sets the draw range. Use this to control what is drawn on screen. The
	default is to draw everything.

	*********
	Arguments
	*********
	
	x,y,x2,y2 (number)
		The rectangular draw range. Note that the coordinates are local to
		the map. For example (orthogonal), to draw the tile at (0,0) 
		with a tilewidth and tileheight of 16: x,y,x2,y2 = 0,0,16,16 .
		
		For orthogonal, point (0,0) is at the top left of cell   (0,0).
		For isometric,  point (0,0) is at the top vertex of cell (0,0).
		For staggered,  point (0,0) is at the top left of cell   (0,0).
		
	--or--
	
	nil (nil)
		Draw everything.
		
	#######
	Returns
	#######
	
	none
------------------------------------------------------------------------
:autoDrawRange(cx,cy,scale,padding)

	Automatically sets the draw range given the center, scale, and 
	padding of the view.

	*********
	Arguments
	*********
	
	cx,cy (number)
		The center of the rectangular draw range. Note that the 
		coordinates are local to the map.
		
	scale (number)
		The scale of the map. For example, if one draws the map at 0.5 
		scale, the scale would be 0.5.
	
	padding (number)
		Pad the width and height of the draw range. For example,
		with a draw width of 100 and a padding of 10, the true width:
		100 + 10*2
		
		Negative padding is allowed, which makes the view narrower.
		
	#######
	Returns
	#######
	
	none
------------------------------------------------------------------------
:newTileSet(tilewidth,tileheight,image,firstgid,args)
------------------------------------------------------------------------
newTileLayer(args,position)
------------------------------------------------------------------------
:newObjectLayer(args, position)
------------------------------------------------------------------------
:newCustomLayer(position)
------------------------------------------------------------------------
:fromIso(ix,iy)
------------------------------------------------------------------------
:toIso(x,y)
------------------------------------------------------------------------
:callback(cb_name, ...)
------------------------------------------------------------------------
:draw()
------------------------------------------------------------------------